{"name":"Mesos Kafka","tagline":"Apache Kafka on Apache Mesos","body":"Kafka Mesos Framework\r\n======================\r\n\r\nFor issues https://github.com/mesos/kafka/issues\r\n\r\n[Installation](#installation)    \r\n* [Environment Configuration](#environment-configuration)\r\n* [Scheduler Configuration](#scheduler-configuration)\r\n* [Run the scheduler](#run-the-scheduler)\r\n* [Starting and using 1 broker](#starting-and-using-1-broker)\r\n\r\n[Typical Operations](#typical-operations)\r\n* [Run the scheduler with Docker](https://github.com/mesos/kafka/tree/master/src/docker#intro)   \r\n* [Run the scheduler on Marathon](https://github.com/mesos/kafka/tree/master/src/docker#running-image-in-marathon)  \r\n* [Changing the location where data is stored](#changing-the-location-where-data-is-stored)\r\n* [Starting 3 brokers](#starting-3-brokers)\r\n* [High Availability Scheduler State](#high-availability-scheduler-state)\r\n* [Failed Broker Recovery](#failed-broker-recovery)\r\n* [Passing multiple options](#passing-multiple-options)\r\n\r\n\r\n[Navigating the CLI](#navigating-the-cli)\r\n* [Adding brokers to the cluster](#adding-brokers-to-the-cluster)\r\n* [Updating broker configurations](#updating-broker-configurations)\r\n* [Starting brokers](#starting-brokers-in-the-cluster)\r\n* [Stopping brokers](#stopping-brokers-in-the-cluster)\r\n* [Removing brokers](#removing-brokers-from-the-cluster)\r\n* [Rebalancing brokers in the cluster](#rebalancing-topics)\r\n* [Listing topics](#listing-topics)\r\n* [Adding topic](#adding-topic)\r\n* [Updating topic](#updating-topic)\r\n\r\n[Using the REST API](#using-the-rest-api)    \r\n\r\n[Project Goals](#project-goals)\r\n\r\nInstallation\r\n-------------\r\n\r\nInstall OpenJDK 7 (or higher) http://openjdk.java.net/install/\r\n\r\nInstall gradle http://gradle.org/installation\r\n\r\nClone and build the project\r\n\r\n    # git clone https://github.com/mesos/kafka\r\n    # cd kafka\r\n    # ./gradlew jar\r\n    # wget https://archive.apache.org/dist/kafka/0.8.2.2/kafka_2.10-0.8.2.2.tgz\r\n\r\nEnvironment Configuration\r\n--------------------------\r\n\r\nBefore running `./kafka-mesos.sh`, set the location of libmesos:\r\n\r\n    # export MESOS_NATIVE_JAVA_LIBRARY=/usr/local/lib/libmesos.so\r\n\r\nIf the host running scheduler has several IP addresses you may also need to\r\n\r\n    # export LIBPROCESS_IP=<IP_ACCESSIBLE_FROM_MASTER>\r\n\r\nScheduler Configuration\r\n----------------------\r\n\r\nThe scheduler is configured through the command line or `kafka-mesos.properties` file.\r\n\r\nThe following options are available:\r\n```\r\n# ./kafka-mesos.sh help scheduler\r\nStart scheduler \r\nUsage: scheduler [options] [config.properties]\r\n\r\nOption               Description\r\n------               -----------\r\n--api                Api url. Example: http://master:7000\r\n--bind-address       Scheduler bind address (master, 0.0.0.0, 192.168.50.*, if:eth1). Default - all\r\n--debug <Boolean>    Debug mode. Default - false\r\n--framework-name     Framework name. Default - kafka\r\n--framework-role     Framework role. Default - *\r\n--framework-timeout  Framework timeout (30s, 1m, 1h). Default - 30d\r\n--jre                JRE zip-file (jre-7-openjdk.zip). Default - none.\r\n--log                Log file to use. Default - stdout.\r\n--master             Master connection settings. Examples:\r\n                      - master:5050\r\n                      - master:5050,master2:5050\r\n                      - zk://master:2181/mesos\r\n                      - zk://username:password@master:2181\r\n                      - zk://master:2181,master2:2181/mesos\r\n--principal          Principal (username) used to register framework. Default - none\r\n--secret             Secret (password) used to register framework. Default - none\r\n--storage            Storage for cluster state. Examples:\r\n                      - file:kafka-mesos.json\r\n                      - zk:/kafka-mesos\r\n                     Default - file:kafka-mesos.json\r\n--user               Mesos user to run tasks. Default - none\r\n--zk                 Kafka zookeeper.connect. Examples:\r\n                      - master:2181\r\n                      - master:2181,master2:2181\r\n```\r\n\r\nAdditionally you can create `kafka-mesos.properties` containing values for CLI options of scheduler.\r\n\r\nExample of `kafka-mesos.properties`:\r\n```\r\nstorage=file:kafka-mesos.json\r\nmaster=zk://master:2181/mesos\r\nzk=master:2181\r\napi=http://master:7000\r\n```\r\n\r\nNow if running scheduler via `./kafka-mesos.sh scheduler` (no options specified) the scheduler will read values for options\r\nfrom the above file. You could also specify alternative config file by using `config` argument of the scheduler.\r\n\r\nRun the scheduler\r\n-----------------\r\n\r\nStart the Kafka scheduler using this command:\r\n\r\n    # ./kafka-mesos.sh scheduler\r\n\r\nNote: you can also use Marathon to launch the scheduler process so it gets restarted if it crashes.\r\n\r\nStarting and using 1 broker\r\n---------------------------\r\n\r\nFirst let's start up and use 1 broker with the default settings. Further in the readme you can see how to change these from the defaults.\r\n\r\n```\r\n# ./kafka-mesos.sh broker add 0\r\nbroker added:\r\n  id: 0\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m\r\n```\r\n\r\nYou now have a cluster with 1 broker that is not started.\r\n\r\n```\r\n# ./kafka-mesos.sh broker list\r\nbroker:\r\n  id: 0\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m\r\n```\r\nNow let's start the broker.\r\n\r\n```\r\n# ./kafka-mesos.sh broker start 0\r\nbroker started:\r\n  id: 0\r\n  active: true\r\n  state: running\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m, hostname:slave0\r\n  task:\r\n    id: broker-0-d2d94520-2f3e-4779-b276-771b4843043c\r\n    running: true\r\n    endpoint: 172.16.25.62:31000\r\n    attributes: rack=r1\r\n```\r\n\r\nGreat! Now let's produce and consume from the cluster. Let's use [kafkacat](https://github.com/edenhill/kafkacat), a nice third party c library command line tool for Kafka.\r\n\r\n```\r\n# echo \"test\"|kafkacat -P -b \"172.16.25.62:31000\" -t testTopic -p 0\r\n```\r\n\r\nAnd let's read it back.\r\n\r\n```\r\n# kafkacat -C -b \"172.16.25.62:31000\" -t testTopic -p 0 -e\r\ntest\r\n```\r\n\r\nThis is a beta version.\r\n\r\nTypical Operations\r\n===================\r\n\r\nChanging the location where data is stored\r\n------------------------------------------\r\n\r\n```\r\n# ./kafka-mesos.sh broker stop 0\r\nbroker stopped:\r\n  id: 0\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m, hostname:slave0, expires:2015-07-10 15:51:43+03\r\n\r\n# ./kafka-mesos.sh broker update 0 --options log.dirs=/mnt/array1/broker0\r\nbroker updated:\r\n  id: 0\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  options: log.dirs=/mnt/array1/broker0\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m, hostname:slave0, expires:2015-07-10 15:51:43+03\r\n\r\n# ./kafka-mesos.sh broker start 0\r\nbroker started:\r\n  id: 0\r\n  active: true\r\n  state: running\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m, hostname:slave0\r\n  task:\r\n    id: broker-0-d2d94520-2f3e-4779-b276-771b4843043c\r\n    running: true\r\n    endpoint: 172.16.25.62:31000\r\n    attributes: rack=r1\r\n```\r\n\r\nStarting 3 brokers\r\n-------------------------\r\n\r\n```\r\n#./kafka-mesos.sh broker add 0..2 --heap 1024 --mem 2048\r\nbrokers added:\r\n  id: 0\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m\r\n\r\n  id: 1\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m\r\n\r\n  id: 2\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m\r\n\r\n#./kafka-mesos.sh broker start 0..2\r\nbrokers started:\r\n  id: 0\r\n  active: true\r\n  state: running\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m, hostname:slave0\r\n  task:\r\n    id: broker-0-d2d94520-2f3e-4779-b276-771b4843043c\r\n    running: true\r\n    endpoint: 172.16.25.62:31000\r\n    attributes: rack=r1\r\n\r\n  id: 1\r\n  active: true\r\n  state: running\r\n  ...\r\n```\r\n\r\nHigh Availability Scheduler State\r\n-------------------------\r\nThe scheduler supports storing the cluster state in Zookeeper. It currently shares a znode within the mesos ensemble. To turn this on in properties \r\n\r\n```\r\nclusterStorage=zk:/kafka-mesos\r\n```\r\n\r\nFailed Broker Recovery\r\n------------------------\r\nWhen a broker fails, kafka mesos scheduler assumes that the failure is recoverable. The scheduler will try\r\nto restart the broker after waiting failover-delay (i.e. 30s, 2m). The initial waiting delay is equal to failover-delay setting.\r\nAfter each consecutive failure this delay is doubled until it reaches failover-max-delay value.\r\n\r\nIf failover-max-tries is defined and the consecutive failure count exceeds it, the broker will be deactivated.\r\n\r\nThe following failover settings exists:\r\n```\r\n--failover-delay     - initial failover delay to wait after failure, required\r\n--failover-max-delay - max failover delay, required\r\n--failover-max-tries - max failover tries to deactivate broker, optional\r\n```\r\n\r\nBroker Placement Stickiness\r\n---------------------------\r\nIf a broker is started within a stickiness-period interval from it's stop time, the scheduler will place it on the same node\r\nit was on during the last successful start. This applies both to failover and manual restarts.\r\n\r\nThe following stickiness settings exists:\r\n```\r\n--stickiness-period  - period of time during which broker would be restarted on the same node\r\n```\r\n\r\nPassing multiple options\r\n-----------------------\r\nA common use case is to supply multiple `log.dirs`, or provide other options. To do this you may use comma escaping like this:\r\n\r\n```\r\n./kafka-mesos.sh broker update 0 --options log.dirs=/mnt/array1/broker0\\\\,/mnt/array2/broker0,num.io.threads=16\r\nbroker updated:\r\n  id: 0\r\n  active: false\r\n  state: stopped\r\n  resources: cpus:1.00, mem:2048, heap:1024, port:auto\r\n  options: log.dirs=/mnt/array1/broker0\\,/mnt/array2/broker0,num.io.threads=16\r\n  failover: delay:1m, max-delay:10m\r\n  stickiness: period:10m, hostname:slave0, expires:2015-07-29 11:54:39Z\r\n```\r\n\r\n\r\nNavigating the CLI\r\n==================\r\n\r\nAdding brokers to the cluster\r\n-------------------------------\r\n\r\n```\r\n# ./kafka-mesos.sh help broker add\r\nAdd broker\r\nUsage: broker add <broker-expr> [options]\r\n\r\nOption                Description\r\n------                -----------\r\n--bind-address        broker bind address (broker0, 192.168.50.*, if:eth1). Default - auto\r\n--constraints         constraints (hostname=like:master,rack=like:1.*). See below.\r\n--cpus <Double>       cpu amount (0.5, 1, 2)\r\n--failover-delay      failover delay (10s, 5m, 3h)\r\n--failover-max-delay  max failover delay. See failoverDelay.\r\n--failover-max-tries  max failover tries. Default - none\r\n--heap <Long>         heap amount in Mb\r\n--jvm-options         jvm options string (-Xms128m -XX:PermSize=48m)\r\n--log4j-options       log4j options or file. Examples:\r\n                       log4j.logger.kafka=DEBUG\\, kafkaAppender\r\n                       file:log4j.properties\r\n--mem <Long>          mem amount in Mb\r\n--options             options or file. Examples:\r\n                       log.dirs=/tmp/kafka/$id,num.io.threads=16\r\n                       file:server.properties\r\n--port                port or range (31092, 31090..31100). Default - auto\r\n--stickiness-period   stickiness period to preserve same node for broker (5m, 10m, 1h)\r\n--volume              pre-reserved persistent volume id\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n\r\nconstraint examples:\r\n  like:master     - value equals 'master'\r\n  unlike:master   - value not equals 'master'\r\n  like:slave.*    - value starts with 'slave'\r\n  unique          - all values are unique\r\n  cluster         - all values are the same\r\n  cluster:master  - value equals 'master'\r\n  groupBy         - all values are the same\r\n  groupBy:3       - all values are within 3 different groups\r\n```\r\n\r\nUpdating broker configurations\r\n-----------------------------------\r\n\r\n```\r\n# ./kafka-mesos.sh help broker update\r\nUpdate broker\r\nUsage: broker update <broker-expr> [options]\r\n\r\nOption                Description\r\n------                -----------\r\n--bind-address        broker bind address (broker0, 192.168.50.*, if:eth1). Default - auto\r\n--constraints         constraints (hostname=like:master,rack=like:1.*). See below.\r\n--cpus <Double>       cpu amount (0.5, 1, 2)\r\n--failover-delay      failover delay (10s, 5m, 3h)\r\n--failover-max-delay  max failover delay. See failoverDelay.\r\n--failover-max-tries  max failover tries. Default - none\r\n--heap <Long>         heap amount in Mb\r\n--jvm-options         jvm options string (-Xms128m -XX:PermSize=48m)\r\n--log4j-options       log4j options or file. Examples:\r\n                       log4j.logger.kafka=DEBUG\\, kafkaAppender\r\n                       file:log4j.properties\r\n--mem <Long>          mem amount in Mb\r\n--options             options or file. Examples:\r\n                       log.dirs=/tmp/kafka/$id,num.io.threads=16\r\n                       file:server.properties\r\n--port                port or range (31092, 31090..31100). Default - auto\r\n--stickiness-period   stickiness period to preserve same node for broker (5m, 10m, 1h)\r\n--volume              pre-reserved persistent volume id\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n\r\nconstraint examples:\r\n  like:master     - value equals 'master'\r\n  unlike:master   - value not equals 'master'\r\n  like:slave.*    - value starts with 'slave'\r\n  unique          - all values are unique\r\n  cluster         - all values are the same\r\n  cluster:master  - value equals 'master'\r\n  groupBy         - all values are the same\r\n  groupBy:3       - all values are within 3 different groups\r\n\r\nNote: use \"\" arg to unset an option\r\n```\r\n\r\nStarting brokers in the cluster\r\n-------------------------------\r\n\r\n```\r\n# ./kafka-mesos.sh help broker start\r\nStart broker\r\nUsage: broker start <broker-expr> [options]\r\n\r\nOption     Description\r\n------     -----------\r\n--timeout  timeout (30s, 1m, 1h). 0s - no timeout\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n```\r\n\r\nStopping brokers in the cluster\r\n-------------------------------\r\n\r\n```\r\n# ./kafka-mesos.sh help broker stop\r\nStop broker\r\nUsage: broker stop <broker-expr> [options]\r\n\r\nOption     Description\r\n------     -----------\r\n--force    forcibly stop\r\n--timeout  timeout (30s, 1m, 1h). 0s - no timeout\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n```\r\n\r\nRemoving brokers from the cluster\r\n----------------------------------\r\n\r\n```\r\n# ./kafka-mesos.sh help broker remove\r\nRemove broker\r\nUsage: broker remove <broker-expr> [options]\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n```\r\n\r\nListing Topics\r\n--------------\r\n```\r\n#./kafka-mesos.sh help topic list\r\nList topics\r\nUsage: topic list [<topic-expr>]\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\ntopic-expr examples:\r\n  t0        - topic t0\r\n  t0,t1     - topics t0, t1\r\n  *         - any topic\r\n  t*        - topics starting with 't'\r\n```\r\n\r\nAdding Topic\r\n------------\r\n```\r\n#./kafka-mesos.sh help topic add\r\nAdd topic\r\nUsage: topic add <topic-expr> [options]\r\n\r\nOption                  Description\r\n------                  -----------\r\n--broker                <broker-expr>. Default - *. See below.\r\n--options               topic options. Example: flush.ms=60000,retention.ms=6000000\r\n--partitions <Integer>  partitions count. Default - 1\r\n--replicas <Integer>    replicas count. Default - 1\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\ntopic-expr examples:\r\n  t0        - topic t0\r\n  t0,t1     - topics t0, t1\r\n  *         - any topic\r\n  t*        - topics starting with 't'\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n```\r\n\r\nUpdating Topic\r\n--------------\r\n```\r\n#./kafka-mesos.sh help topic update\r\nUpdate topic\r\nUsage: topic update <topic-expr> [options]\r\n\r\nOption     Description\r\n------     -----------\r\n--options  topic options. Example: flush.ms=60000,retention.ms=6000000\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\ntopic-expr examples:\r\n  t0        - topic t0\r\n  t0,t1     - topics t0, t1\r\n  *         - any topic\r\n  t*        - topics starting with 't'\r\n```\r\n\r\nRebalancing topics\r\n----------------------------------\r\n```\r\n#./kafka-mesos.sh help topic rebalance\r\nRebalance topics\r\nUsage: topic rebalance <topic-expr>|status [options]\r\n\r\nOption                Description\r\n------                -----------\r\n--broker              <broker-expr>. Default - *. See below.\r\n--replicas <Integer>  replicas count. Default - 1\r\n--timeout             timeout (30s, 1m, 1h). 0s - no timeout\r\n\r\nGeneric Options\r\nOption  Description\r\n------  -----------\r\n--api   Api url. Example: http://master:7000\r\n\r\ntopic-expr examples:\r\n  t0        - topic t0\r\n  t0,t1     - topics t0, t1\r\n  *         - any topic\r\n  t*        - topics starting with 't'\r\n\r\nbroker-expr examples:\r\n  0      - broker 0\r\n  0,1    - brokers 0,1\r\n  0..2   - brokers 0,1,2\r\n  0,1..2 - brokers 0,1,2\r\n  *      - any broker\r\nattribute filtering:\r\n  *[rack=r1]           - any broker having rack=r1\r\n  *[hostname=slave*]   - any broker on host with name starting with 'slave'\r\n  0..4[rack=r1,dc=dc1] - any broker having rack=r1 and dc=dc1\r\n```\r\n\r\nUsing the REST API\r\n========================\r\n\r\nThe scheduler REST API fully exposes all of the features of the CLI with the following request format:\r\n```\r\n/api/broker/<cli command>/broker={broker-expr}&<setting>=<value>\r\n/api/topic/<cli command>/topic={topic-expr}&<setting>=<value>\r\n```\r\n\r\nListing brokers\r\n\r\n```\r\n# curl \"http://localhost:7000/api/broker/list\"\r\n{\"brokers\" : [{\"id\" : \"0\", \"mem\" : 128, \"cpus\" : 0.1, \"heap\" : 128, \"failover\" : {\"delay\" : \"10s\", \"maxDelay\" : \"60s\", \"failures\" : 5, \"failureTime\" : 1426651240585}, \"active\" : true}, {\"id\" : \"5\", \"mem\" : 128, \"cpus\" : 0.5, \"heap\" : 128, \"failover\" : {\"delay\" : \"10s\", \"maxDelay\" : \"60s\"}, \"active\" : false}, {\"id\" : \"8\", \"mem\" : 43008, \"cpus\" : 8.0, \"heap\" : 128, \"failover\" : {\"delay\" : \"10s\", \"maxDelay\" : \"60s\"}, \"active\" : true}]}\r\n```\r\n\r\nAdding a broker\r\n\r\n```\r\n# curl \"http://localhost:7000/api/broker/add?broker=0&cpus=8&mem=43008\"\r\n{\"brokers\" : [{\"id\" : \"0\", \"mem\" : 43008, \"cpus\" : 8.0, \"heap\" : 128, \"failover\" : {\"delay\" : \"10s\", \"maxDelay\" : \"60s\"}, \"active\" : false}]}\r\n```\r\n\r\nStarting a broker\r\n\r\n```\r\n# curl \"http://localhost:7000/api/broker/start?broker=0\"\r\n{\"success\" : true, \"ids\" : \"0\"}\r\n```\r\n\r\nStopping a broker\r\n\r\n```\r\n# curl \"http://localhost:7000/api/broker/stop?broker=0\"\r\n{\"success\" : true, \"ids\" : \"0\"}\r\n```\r\n\r\nRemoving a broker\r\n\r\n```\r\n# curl \"http://localhost:7000/api/broker/remove?broker=0\"\r\n{\"ids\" : \"0\"}\r\n```\r\n\r\nListing topics\r\n```\r\n# curl \"http://localhost:7000/api/topic/list\"\r\n{\"topics\" : [{\"name\" : \"t\", \"partitions\" : {\"0\" : \"0, 1\"}, \"options\" : {\"flush.ms\": \"1000\"}}]}\r\n```\r\n\r\nAdding topic\r\n```\r\n# curl \"http://localhost:7000/api/topic/add?topic=t\"\r\n{\"topic\" : {\"name\" : \"t\", \"partitions\" : {\"0\" : \"1\"}, \"options\" : {}}}\r\n```\r\n\r\nUpdating topic\r\n```\r\n# curl \"http://localhost:7000/api/topic/update?topic=t&options=flush.ms%3D1000\"\r\n{\"topic\" : {\"name\" : \"t\", \"partitions\" : {\"0\" : \"0, 1\"}, \"options\" : {\"flush.ms\" : \"1000\"}}}\r\n```\r\n\r\nProject Goals\r\n==============\r\n\r\n* smart broker.id assignment.\r\n\r\n* preservation of broker placement (through constraints and/or new features).\r\n\r\n* ability to-do configuration changes.\r\n\r\n* rolling restarts (for things like configuration changes).\r\n\r\n* scaling the cluster up and down with automatic, programmatic and manual options.\r\n\r\n* smart partition assignment via constraints visa vi roles, resources and attributes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}